server.port=8000
# Database Settings
spring.datasource.url=jdbc:postgresql://localhost:5432/profile_service_db

spring.datasource.username= postgres
spring.datasource.password= postgres

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
# Allows for auto creation of tables
spring.jpa.hibernate.ddl-auto = update

# when using @Slf4j, you need to add the following to show the logs in the terminal
logging.level.com=INFO

#### kafka
######################## Producer profiledto   ########################
spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer

spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=profile:com.maitsev.profileservice.profile.model.Profile

# "order" is a random token word that need to be shared between the two bindings
spring.kafka.consumer.properties.spring.json.type.mapping=profiletosend:com.maitsev.profileservice.profile.model.Profile

spring.kafka.consumer.enable-auto-commit=false

#  * means deserialize all.
spring.kafka.consumer.properties.spring.json.trusted.packages=*